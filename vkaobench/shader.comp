#version 450
#extension GL_ARB_separate_shader_objects : enable

const float PI = 3.14159265;
const float EPS = 0.0001;
const uint NAO_SAMPLES = 8;
const uint NSUBSAMPLES = 2;

layout(local_size_x_id = 0, local_size_y_id = 0) in;
layout(constant_id = 1) const uint WIDTH = 0;
layout(constant_id = 2) const uint HEIGHT = 0;

layout(binding = 0) buffer Buffer {
    vec4 image[];
};

struct Isect {
    float t;
    vec3 p;
    vec3 n;
    bool hit;
};

struct Sphere {
    vec3 center;
    float radius;
};

struct Plane {
    vec3 p;
    vec3 n;
};

struct Ray {
    vec3 org;
    vec3 dir;
};

const Sphere spheres[3] = Sphere[](
    Sphere(vec3(-2, 0, -3.5), 0.5),
    Sphere(vec3(-0.5, 0, -3), 0.5),
    Sphere(vec3(1, 0, -2.2), 0.5)
);

const Plane plane = Plane(vec3(0, -0.5, 0), vec3(0, 1, 0));

void ray_sphere_intersect(inout Isect isect, Ray ray, Sphere sphere) {
    vec3 rs = ray.org - sphere.center;
    float B = dot(rs, ray.dir);
    float C = dot(rs, rs) - sphere.radius * sphere.radius;
    float D = B * B - C;

    if (D > 0) {
        float t = -B - sqrt(D);

        if (t > 0 && t < isect.t) {
            isect.t = t;
            isect.hit = true;

            isect.p = ray.org + ray.dir * t;
            isect.n = normalize(isect.p - sphere.center);
        }
    }
}

void ray_plane_intersect(inout Isect isect, Ray ray, Plane plane) {
    float d = -dot(plane.p, plane.n);
    float v = dot(ray.dir, plane.n);

    if (abs(v) < 1e-17) return;

    float t = -(dot(ray.org, plane.n) + d) / v;

    if (t > 0 && t < isect.t) {
        isect.t = t;
        isect.hit = true;

        isect.p = ray.org + ray.dir * t;
        isect.n = plane.n;
    }
}

mat3 orthoBasis(vec3 n) {
    vec3 b = vec3(0, 0, 0);
    if (abs(n.x) < 0.6) {
        b.x = 1;
    } else if (abs(n.y) < 0.6) {
        b.y = 1;
    } else if (abs(n.z) < 0.6) {
        b.z = 1;
    } else {
        b.x = 1;
    }

    vec3 a  = normalize(cross(b, n));

    return mat3(a, normalize(cross(n, a)), n);
}

float rand(vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 ambient_occlusion(Isect isect) {
    vec3 p = isect.p + EPS * isect.n;
    mat3 basis = orthoBasis(isect.n);

    vec2 uv = gl_GlobalInvocationID.xy / vec2(WIDTH, HEIGHT);
    float occlusion = 0;
    for (int j = 0; j < NAO_SAMPLES; ++j) {
        for (int i = 0; i < NAO_SAMPLES; ++i) {
            float theta = sqrt(rand(vec2(i, j) / NAO_SAMPLES + uv));
            float phi = 2 * PI * rand(vec2(j, i) / NAO_SAMPLES + uv);

            vec3 l = vec3(cos(phi) * theta, sin(phi) * theta, sqrt(1 - theta * theta));

            Ray ray = Ray(p, basis * l);

            Isect occIsect;
            occIsect.t = 1e17;
            occIsect.hit = false;

            ray_sphere_intersect(occIsect, ray, spheres[0]);
            ray_sphere_intersect(occIsect, ray, spheres[1]);
            ray_sphere_intersect(occIsect, ray, spheres[2]);
            ray_plane_intersect(occIsect, ray, plane);

            if (occIsect.hit) occlusion += 1;
        }
    }

    return vec3(1 - occlusion / (NAO_SAMPLES * NAO_SAMPLES));
}

void main() {
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) {
        return;
    }

    vec3 col = vec3(0, 0, 0);
    for (int v = 0; v < NSUBSAMPLES; ++v) {
        for (int u = 0; u < NSUBSAMPLES; ++u) {
            float px = (gl_GlobalInvocationID.x + u / float(NSUBSAMPLES) - WIDTH / 2.0) / (WIDTH / 2.0);
            float py = -(gl_GlobalInvocationID.y + v / float(NSUBSAMPLES) - HEIGHT / 2.0) / (HEIGHT / 2.0);

            Ray ray = Ray(vec3(0, 0, 0), normalize(vec3(px, py, -1)));

            Isect isect;
            isect.t = 1e17;
            isect.hit = false;

            ray_sphere_intersect(isect, ray, spheres[0]);
            ray_sphere_intersect(isect, ray, spheres[1]);
            ray_sphere_intersect(isect, ray, spheres[2]);
            ray_plane_intersect(isect, ray, plane);

            if (isect.hit) {
                col += ambient_occlusion(isect);
            }
        }
    }

    image[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = vec4(col / float(NSUBSAMPLES * NSUBSAMPLES), 1);
}